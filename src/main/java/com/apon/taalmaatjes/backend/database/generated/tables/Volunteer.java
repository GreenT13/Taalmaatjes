/*
 * This file is generated by jOOQ.
*/
package com.apon.taalmaatjes.backend.database.generated.tables;


import com.apon.taalmaatjes.backend.database.generated.Indexes;
import com.apon.taalmaatjes.backend.database.generated.Keys;
import com.apon.taalmaatjes.backend.database.generated.Public;
import com.apon.taalmaatjes.backend.database.generated.tables.records.VolunteerRecord;

import java.sql.Date;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.2"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Volunteer extends TableImpl<VolunteerRecord> {

    private static final long serialVersionUID = -216212572;

    /**
     * The reference instance of <code>PUBLIC.VOLUNTEER</code>
     */
    public static final Volunteer VOLUNTEER = new Volunteer();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<VolunteerRecord> getRecordType() {
        return VolunteerRecord.class;
    }

    /**
     * The column <code>PUBLIC.VOLUNTEER.VOLUNTEERID</code>.
     */
    public final TableField<VolunteerRecord, Integer> VOLUNTEERID = createField("VOLUNTEERID", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>PUBLIC.VOLUNTEER.FIRSTNAME</code>.
     */
    public final TableField<VolunteerRecord, String> FIRSTNAME = createField("FIRSTNAME", org.jooq.impl.SQLDataType.VARCHAR(100), this, "");

    /**
     * The column <code>PUBLIC.VOLUNTEER.INITIALS</code>.
     */
    public final TableField<VolunteerRecord, String> INITIALS = createField("INITIALS", org.jooq.impl.SQLDataType.VARCHAR(100), this, "");

    /**
     * The column <code>PUBLIC.VOLUNTEER.LASTNAME</code>.
     */
    public final TableField<VolunteerRecord, String> LASTNAME = createField("LASTNAME", org.jooq.impl.SQLDataType.VARCHAR(100), this, "");

    /**
     * The column <code>PUBLIC.VOLUNTEER.DATEOFBIRTH</code>.
     */
    public final TableField<VolunteerRecord, Date> DATEOFBIRTH = createField("DATEOFBIRTH", org.jooq.impl.SQLDataType.DATE, this, "");

    /**
     * The column <code>PUBLIC.VOLUNTEER.CITY</code>.
     */
    public final TableField<VolunteerRecord, String> CITY = createField("CITY", org.jooq.impl.SQLDataType.VARCHAR(100), this, "");

    /**
     * The column <code>PUBLIC.VOLUNTEER.PHONENUMBER</code>.
     */
    public final TableField<VolunteerRecord, String> PHONENUMBER = createField("PHONENUMBER", org.jooq.impl.SQLDataType.VARCHAR(100), this, "");

    /**
     * The column <code>PUBLIC.VOLUNTEER.MOBILEPHONENUMBER</code>.
     */
    public final TableField<VolunteerRecord, String> MOBILEPHONENUMBER = createField("MOBILEPHONENUMBER", org.jooq.impl.SQLDataType.VARCHAR(100), this, "");

    /**
     * The column <code>PUBLIC.VOLUNTEER.EMAIL</code>.
     */
    public final TableField<VolunteerRecord, String> EMAIL = createField("EMAIL", org.jooq.impl.SQLDataType.VARCHAR(100), this, "");

    /**
     * The column <code>PUBLIC.VOLUNTEER.HASTRAINING</code>.
     */
    public final TableField<VolunteerRecord, Boolean> HASTRAINING = createField("HASTRAINING", org.jooq.impl.SQLDataType.BOOLEAN, this, "");

    /**
     * Create a <code>PUBLIC.VOLUNTEER</code> table reference
     */
    public Volunteer() {
        this(DSL.name("VOLUNTEER"), null);
    }

    /**
     * Create an aliased <code>PUBLIC.VOLUNTEER</code> table reference
     */
    public Volunteer(String alias) {
        this(DSL.name(alias), VOLUNTEER);
    }

    /**
     * Create an aliased <code>PUBLIC.VOLUNTEER</code> table reference
     */
    public Volunteer(Name alias) {
        this(alias, VOLUNTEER);
    }

    private Volunteer(Name alias, Table<VolunteerRecord> aliased) {
        this(alias, aliased, null);
    }

    private Volunteer(Name alias, Table<VolunteerRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.PRIMARY_KEY_2);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<VolunteerRecord> getPrimaryKey() {
        return Keys.VOLU_PK;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<VolunteerRecord>> getKeys() {
        return Arrays.<UniqueKey<VolunteerRecord>>asList(Keys.VOLU_PK);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Volunteer as(String alias) {
        return new Volunteer(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Volunteer as(Name alias) {
        return new Volunteer(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Volunteer rename(String name) {
        return new Volunteer(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Volunteer rename(Name name) {
        return new Volunteer(name, null);
    }
}
